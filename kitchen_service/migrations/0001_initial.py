# Generated by Django 5.1 on 2024-11-15 01:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import kitchen_service.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DishType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Cook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='Only alphabetic characters are allowed.', regex='^[A-Za-z]+$')])),
                ('last_name', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='Only alphabetic characters are allowed.', regex='^[A-Za-z]+$')])),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('years_of_experience', models.IntegerField(db_index=True, default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('photo', models.ImageField(default='cooks/default.jpg', upload_to=kitchen_service.models.user_directory_path)),
                ('facebook_link', models.URLField(default='https://www.facebook.com/')),
                ('instagram_link', models.URLField(default='https://www.instagram.com/')),
                ('twitter_link', models.URLField(default='https://www.twitter.com/')),
                ('is_cook', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Cooks and Customers',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Dish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('is_popular', models.BooleanField(db_index=True, default=False)),
                ('meal_time', models.CharField(choices=[('BF', 'Breakfast'), ('LN', 'Lunch'), ('DN', 'Dinner')], default='LN', max_length=2)),
                ('image', models.ImageField(default='dishes/default.jpg', upload_to='dishes/')),
                ('cooks', models.ManyToManyField(related_name='cooked_dishes', to=settings.AUTH_USER_MODEL)),
                ('dish_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kitchen_service.dishtype')),
                ('ingredients', models.ManyToManyField(related_name='used_in_dishes', to='kitchen_service.ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(editable=False, max_length=10, unique=True)),
                ('customer_name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='The name field must contain only letters.', regex='^[A-Za-zА-Яа-яЁё]+$')])),
                ('order_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('total_price', models.DecimalField(decimal_places=2, editable=False, max_digits=8)),
                ('status', models.CharField(choices=[('P', 'Pending'), ('C', 'Completed'), ('R', 'Rejected')], default='P', max_length=1)),
                ('cook', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('dishes', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='kitchen_service.dish')),
            ],
            options={
                'indexes': [models.Index(fields=['order_date'], name='kitchen_ser_order_d_12129b_idx'), models.Index(fields=['status'], name='kitchen_ser_status_c7b3b4_idx')],
            },
        ),
    ]
